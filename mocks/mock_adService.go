// Code generated by MockGen. DO NOT EDIT.
// Source: ad-crawler/service (interfaces: AdService)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "ad-crawler/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAdService is a mock of AdService interface
type MockAdService struct {
	ctrl     *gomock.Controller
	recorder *MockAdServiceMockRecorder
}

// MockAdServiceMockRecorder is the mock recorder for MockAdService
type MockAdServiceMockRecorder struct {
	mock *MockAdService
}

// NewMockAdService creates a new mock instance
func NewMockAdService(ctrl *gomock.Controller) *MockAdService {
	mock := &MockAdService{ctrl: ctrl}
	mock.recorder = &MockAdServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdService) EXPECT() *MockAdServiceMockRecorder {
	return m.recorder
}

// GetAdsByPublisher mocks base method
func (m *MockAdService) GetAdsByPublisher(arg0 string) ([]model.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdsByPublisher", arg0)
	ret0, _ := ret[0].([]model.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdsByPublisher indicates an expected call of GetAdsByPublisher
func (mr *MockAdServiceMockRecorder) GetAdsByPublisher(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdsByPublisher", reflect.TypeOf((*MockAdService)(nil).GetAdsByPublisher), arg0)
}

// InsertAdsInDatabase mocks base method
func (m *MockAdService) InsertAdsInDatabase(arg0 []model.PublisherData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAdsInDatabase", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAdsInDatabase indicates an expected call of InsertAdsInDatabase
func (mr *MockAdServiceMockRecorder) InsertAdsInDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAdsInDatabase", reflect.TypeOf((*MockAdService)(nil).InsertAdsInDatabase), arg0)
}

// PopulateAllAds mocks base method
func (m *MockAdService) PopulateAllAds() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulateAllAds")
	ret0, _ := ret[0].(error)
	return ret0
}

// PopulateAllAds indicates an expected call of PopulateAllAds
func (mr *MockAdServiceMockRecorder) PopulateAllAds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateAllAds", reflect.TypeOf((*MockAdService)(nil).PopulateAllAds))
}
