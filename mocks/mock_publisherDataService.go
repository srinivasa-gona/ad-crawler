// Code generated by MockGen. DO NOT EDIT.
// Source: ad-crawler/service (interfaces: PublisherDataService)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "ad-crawler/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPublisherDataService is a mock of PublisherDataService interface
type MockPublisherDataService struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherDataServiceMockRecorder
}

// MockPublisherDataServiceMockRecorder is the mock recorder for MockPublisherDataService
type MockPublisherDataServiceMockRecorder struct {
	mock *MockPublisherDataService
}

// NewMockPublisherDataService creates a new mock instance
func NewMockPublisherDataService(ctrl *gomock.Controller) *MockPublisherDataService {
	mock := &MockPublisherDataService{ctrl: ctrl}
	mock.recorder = &MockPublisherDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublisherDataService) EXPECT() *MockPublisherDataServiceMockRecorder {
	return m.recorder
}

// GetPublisherData mocks base method
func (m *MockPublisherDataService) GetPublisherData() ([]model.PublisherData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublisherData")
	ret0, _ := ret[0].([]model.PublisherData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublisherData indicates an expected call of GetPublisherData
func (mr *MockPublisherDataServiceMockRecorder) GetPublisherData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublisherData", reflect.TypeOf((*MockPublisherDataService)(nil).GetPublisherData))
}
