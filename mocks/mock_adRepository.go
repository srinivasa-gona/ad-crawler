// Code generated by MockGen. DO NOT EDIT.
// Source: ad-crawler/repository (interfaces: AdRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "ad-crawler/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAdRepository is a mock of AdRepository interface
type MockAdRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdRepositoryMockRecorder
}

// MockAdRepositoryMockRecorder is the mock recorder for MockAdRepository
type MockAdRepositoryMockRecorder struct {
	mock *MockAdRepository
}

// NewMockAdRepository creates a new mock instance
func NewMockAdRepository(ctrl *gomock.Controller) *MockAdRepository {
	mock := &MockAdRepository{ctrl: ctrl}
	mock.recorder = &MockAdRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAdRepository) EXPECT() *MockAdRepositoryMockRecorder {
	return m.recorder
}

// CreateTable mocks base method
func (m *MockAdRepository) CreateTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable
func (mr *MockAdRepositoryMockRecorder) CreateTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockAdRepository)(nil).CreateTable))
}

// GetRecords mocks base method
func (m *MockAdRepository) GetRecords(arg0 string) ([]model.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecords", arg0)
	ret0, _ := ret[0].([]model.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecords indicates an expected call of GetRecords
func (mr *MockAdRepositoryMockRecorder) GetRecords(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecords", reflect.TypeOf((*MockAdRepository)(nil).GetRecords), arg0)
}

// InsertRecords mocks base method
func (m *MockAdRepository) InsertRecords(arg0 string, arg1 []model.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRecords", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRecords indicates an expected call of InsertRecords
func (mr *MockAdRepositoryMockRecorder) InsertRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRecords", reflect.TypeOf((*MockAdRepository)(nil).InsertRecords), arg0, arg1)
}
